<div id="homepage-exam-report" 
        class="flex max-w-full mx-4 p-4 gap-2 bg-white rounded-2xl shadow-md">
        <div class="flex justify-between">
        <div class="flex flex-col gap-y-2">
            <div class="flex justify-start">
                <span class="text-3xl font-bold text-blue-900">
                    Exams
                </span>
            </div>
                        
        
            <div class="flex  gap-x-1">
                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                <span class="text-2xl font-bold text-gray-900 self-center">
                    {{ exam }}
                </span>
                <span class="text-xs text-gray-400 font-mono font-semibold self-center mt-auto">Count</span>
                </div>
                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                    <span class="text-2xl font-bold text-green-900 self-center">
                        {{ exam }}
                    </span>
                    <span class="text-xs text-green-400 font-mono font-semibold self-center mt-auto">Published</span>
                </div>
                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                    <span class="text-2xl font-bold text-orange-900 self-center">
                        {{ exam }}
                    </span>
                    <span class="text-xs text-orange-400 font-mono font-semibold self-center mt-auto">Unpublished</span>
                </div>
            </div>

            <div class="flex flex-col w-74 max-w-full gap-y-2">
                <span class="text-md font-bold text-gray-600">Examination Dates</span>
                <div id="calendar" class="grid grid-cols-7 gap-1 w-full"></div>
                <span class="text-xs font-semibold text-gray-500 self-end">Month</span>
            </div>
        </div>

    </div>
        

    <div class="w-full pl-4">
        <div id="exam-graph" class="w-full"></div>
    </div>


</div>

<script>
    // Check if exam-graph id is present
    let exam_graph = document.getElementById('exam-graph');
    if (exam_graph){
        // Instantiate necessary variables.
        // exam by question values and exam by courses values
        // Dummy data
        const exam_question_values = [0];
        const exam_courses_values = [];
        const exam_question_labels = [""];
        const exam_courses_labels = [];

        for (let i = 0; i < 40; i++) {
            exam_question_values.push(Math.round(1 + Math.random() * 49));
            exam_question_labels.push('Exam ' + i);
        }   
        for (let i = 0; i < 10; i++) {
            exam_courses_values.push(Math.round(1 + Math.random() * 10));
            exam_courses_labels.push('Course ' + i);
        }   

        let exam_courses_data = exam_courses_labels.map((label, i) => ({ label: label, value: exam_courses_values[i] }));
        let exam_questions_data = exam_question_labels.map((label, i) => ({ label: label, value: exam_question_values[i] }));
        exam_courses_data.sort((a, b) => a.value - b.value);
        exam_questions_data.sort((a, b) => a.value - b.value);

        
        // Build traces for the two graphs
        let exam_questions = {
            name:'Exams by Questions',
            x: exam_questions_data.map(d => d.label),
            y: exam_questions_data.map(d => d.value),
            hovertemplate:  '<b>No. of Questions</b>: %{y}' +
                            '<br><b>Exam</b> : %{x}<br><extra></extra>',
            width:0.8,
            type: 'bar',
            marker: {
                color: 'rgb(49,130,189)',
                opacity:0.7
            }
        };
        let exam_courses = {
            name:'Exams by Courses',
            x: exam_courses_data.map(d => d.label),
            y: exam_courses_data.map(d => d.value),
            hovertemplate:  '<b>No. of Exams</b>: %{y}' +
                            '<br><b>Course</b> : %{x}<br><extra></extra>',
            width: 0.7,
            xaxis: 'x2',
            yaxis: 'y2',
            type: 'bar',
            marker: {
                color: 'rgb(49,130,189)',
                opacity:0.7
            }
        };
        
        // Insert traces and build layout for graph
        var exam_graph_data = [exam_questions,exam_courses];
        
        var exam_graph_layout = {
            grid: {rows: 2, columns: 1, pattern: 'independent'},
            showlegend: false, 
            title: {
                text: "Exam Composition Report",
                font: {
                    size: 16,
                    color: "#4B5563", 
                    family: "Arial Black, sans-serif" 
                },
                x: 0.5,           // center horizontally
                xanchor: 'center', 
                y: 0.95,          // slightly down from top
                yanchor: 'top'
            },            
            height: 400,
            autosize: true,
            margin: { l: 40, r:10, t: 60, b: 40 },
            
            xaxis: {
                title: {
                    text: 'Exams',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },       
                tickangle: -45,    
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                },
                showticklabels: false,
            },
            yaxis: {
                title: {
                    text: 'No. of Questions',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },   
                tickangle: -45,         
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                    }
            },

            xaxis2: { 
                title: {
                    text: 'Courses',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },   
                tickfont: {
                    size: 10,
                    color: 'rgb(107, 107, 107)'
                },
                
            },
            yaxis2: { 
                title: {
                    text: 'No. of Exams',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },
                tickangle: -45,         
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                    }
            },
        
        };

        // Render the graph and then resize it 
        Plotly.newPlot('exam-graph', exam_graph_data, exam_graph_layout, { responsive: true })
            .then(() => {
                Plotly.Plots.resize('exam-graph');  
            });

        window.addEventListener("resize", () => {
        Plotly.Plots.resize("exam-graph");   
        });

    }


    let exams = [
    { date: "2025-01-06", count: 2 },
    { date: "2025-01-10", count: 1 },
    { date: "2025-01-12", count: 5 }
  ];

  let year = 2025, month = 0; // January
  let firstDay = new Date(year, month, 1).getDay(); // 0=Sun, ... 6=Sat
  let daysInMonth = new Date(year, month + 1, 0).getDate();

  // Map exams to dates
  let examMap = Object.fromEntries(exams.map(e => [e.date, e.count]));

  let calendar = document.getElementById("calendar");

  // Utility for heatmap colors
  function bgClass(count) {
    if (count === 0) return "bg-gray-50";
    if (count === 1) return "bg-blue-300 text-white";
    if (count === 2) return "bg-blue-500 text-white";
    return "bg-blue-900 text-white"; // 3 or more
  }

  // Empty cells before the first day
  for (let i = 0; i < firstDay; i++) {
    let empty_cell = document.createElement("empty_cell");
    empty_cell.className = "aspect-square";
    calendar.appendChild(empty_cell);
  }

  // Calendar days
  for (let day = 1; day <= daysInMonth; day++) {
    let date = new Date(year, month, day).toISOString().slice(0, 10);
    let count = examMap[date] ?? 0;

    let caledar_day_cell = document.createElement("caledar_day_cell");
    caledar_day_cell.className = `aspect-square flex flex-col items-center justify-center rounded ${bgClass(count)} cursor-pointer hover:ring-2 hover:ring-blue-500 transition`;
    caledar_day_cell.title = `${day} Jan: ${count} exam(s)`;

    caledar_day_cell.innerHTML = `
      <span class="text-sm font-medium">${day}</span>
    `;

    calendar.appendChild(caledar_day_cell);
  }
</script>