{% import 'components/core/forms' as forms %}

<div id="homepage-course-report" 
        class="flex flex-col max-w-full mx-4 p-4 gap-2 bg-white rounded-2xl shadow-md">
    <div class="flex gap-x-2">
        <span class="text-3xl font-bold text-blue-900">
            Course : 
        </span>
        {{ forms.form_field(
            label:forms.label(
                id:'course', 
                content:'Course', 
                attributes:{
                    'class':'hidden'}
                    ),
            input:forms.select(
                name:'course', 
                values:courses, 
                attributes:{
                    'class':'w-24 cursor-pointer block rounded-md bg-white px-3 py-1 text-base font-bold text-blue-900 focus:outline-none placeholder:text-gray-400',
                    'placeholder':'Select a Course',
                    'required':true,
                    'hx-get' : route('graphs.homepage.specific.course'),
                    'hx-target': '#course-counts',
                    'hx-swap':'outerHTML',
                    'hx-trigger':'load, change'
                }
            ),
        )}}
    </div>   
    <div id="specific-course-data" class="flex flex-1 justify-between">
        <div class="flex flex-col gap-y-2">
            <div id="course-counts">
            </div>

            <div class="h-full w-full">
                <div id="questions-type-graph" class="w-full"></div>
            </div>
        </div>

        
        <div class="flex flex-1 flex-col w-full ">
            <div class="w-full pl-4">
                <div id="course-graph" class="w-full"></div>
            </div>
        </div>

    </div>
</div>
<script>
function renderCourseGraph() {
    const course_graph = document.getElementById('course-graph');
    console.log(course_graph);
    if (!course_graph) return;

    const subject_raw_data = document.getElementById('subject_graph_data');
    const topic_raw_data = document.getElementById('topic_graph_data');
    const question_type_raw_data = document.getElementById('question_type_graph_data');
    const reused_question_raw_data = document.getElementById('reused_question_graph_data');

    const subjects = JSON.parse(subject_raw_data.dataset.questions || '[]');
    const topics = JSON.parse(topic_raw_data.dataset.questions || '[]');
    const types = JSON.parse(question_type_raw_data.dataset.questions || '[]');
    const reused = JSON.parse(reused_question_raw_data.dataset.questions || '[]');

    const subject_graph_text = subjects.map(q =>
        `<b>Name</b>: ${q["name"]}<br>`
    );

    const topic_graph_text = topics.map(q =>
        `<b>Name</b>: ${q["name"]}<br>`
    );

    const reused_graph_text = reused.map(q =>
        `<b>Id</b>: ${q["id"]}<br>` +
        `<b>Name</b>: ${q["name"]}<br>` +
        `<b>Type</b>: ${q["question_type"]}<br>`
    );
    
    // Plotly traces
    let subject_graph = {
        name:'Questions by Subject',
        x: subjects.map(s => s.name),
        y: subjects.map(s => s.question_count),
        text: subject_graph_text,
        textposition: 'none', 
        hoverinfo: 'text',
        hovertemplate:  '<b>No. of Questions</b>: %{y}' +
                        '<br>%{text}<br><extra></extra>',   
        hoverlabel: {
            font: { color: 'white' }      // hover text color
        },
        width: 0.8,
        type: 'bar',
        marker: {
            color: 'rgb(49,130,189)',
            opacity:0.7
        }
    };

    let topic_graph = {
        name:'Questions by topic',
        x: topics.map(d => d.name),
        y: topics.map(d => d.question_count),
        text: topic_graph_text,
        textposition: 'none', 
        hoverinfo: 'text',
        hovertemplate:  '<b>No. of Questions</b>: %{y}' +
                        '<br>%{text}<br><extra></extra>',   
        hoverlabel: {
            font: { color: 'white' }      // hover text color
        },
        width: 0.7,
        xaxis: 'x2',
        yaxis: 'y2',
        type: 'bar',
        marker: {
            color: 'rgb(49,130,189)',
            opacity:0.7
        }
    };

    const question_exams = {
        name:'Questions in Exams',
        x: reused.map(d => d.name),
        y: reused.map(d => d.reused_count),
        xaxis: 'x3',
        yaxis: 'y3',
        type: 'bar',
        text: reused_graph_text,
        textposition: 'none', 
        hoverinfo: 'text',
        hovertemplate:  '<b>Reused Count</b>: %{y}' +
                        '<br>%{text}<br><extra></extra>',   
        hoverlabel: {
            font: { color: 'white' }      // hover text color
        },
        width: 0.7,
        marker: { color: 'rgb(49,130,189)', opacity: 0.7 }
    };

    const question_types = {
        name: 'Question Types',
        x: types.map(d => d.name),
        y: types.map(d => d.question_count),
        type: 'bar',
        text: types.map(d => d.question_count),
        textposition: 'auto',
        hovertemplate:  '<b>No. of Questions</b>: %{y}<br>' +
                        '<b>Type</b>: %{x}<br><extra></extra>',
        marker: { color: 'rgb(49,130,189)', opacity: 0.7 }
    };

    const subject_and_topic_data = [subject_graph, topic_graph, question_exams];
    const question_type_data = [question_types];

    var course_graph_layout = {
            grid: {    
                rows: 2,
                columns: 2,
                pattern: 'independent',
                roworder: 'top to bottom'
            },
            showlegend: false, 
            title: {
                text: "Course Composition Report",
                font: {
                    size: 16,
                    color: "#4B5563", 
                    family: "Arial Black, sans-serif" 
                },
                x: 0.5,           // center horizontally
                xanchor: 'center', 
                y: 0.95,          // slightly down from top
                yanchor: 'top'
            },            
            height: 400,
            autosize: true,
            margin: { l: 40, r:10, t: 60, b: 40 },
            
            xaxis: {
                title: {
                    text: 'Subjects',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },       
                tickangle: -45,    
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                },
                showticklabels: false,
            },
            yaxis: {
                title: {
                    text: 'No. of Questions',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },   
                tickangle: -45,         
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                    }
            },

            xaxis2: { 
                title: {
                    text: 'Topics',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },   
                tickfont: {
                    size: 10,
                    color: 'rgb(107, 107, 107)'
                },
                showticklabels: false,
                
            },
            yaxis2: {        
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                    }
            },

            xaxis3: { 
                domain: [0.0, 1.0],
                title: {
                    text: 'Reused Questions',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },   
                tickfont: {
                    size: 10,
                    color: 'rgb(107, 107, 107)'
                },
                showticklabels: false,
                anchor: 'y3',
                
            },
            yaxis3: {        
                title: {
                    text: 'No. of Exams',
                    font: {
                        size: 12,
                        color: '#7f7f7f'
                    }
                },   
                tickfont: {
                    size: 14,
                    color: 'rgb(107, 107, 107)'
                    },
                anchor: 'x3',
            },
        
        };

    var questions_per_subject_graph_layout = {
        showlegend: false, 
        title: {
            text: "Questions per Type",
            font: {
                size: 16,
                color: "#4B5563", 
                family: "Arial Black, sans-serif" 
            },
            x: 0.5,           // center horizontally
            xanchor: 'center', 
            y: 0.95,          // slightly down from top
            yanchor: 'top'
        },            
        height: 225,
        autosize: true,
        margin: { l: 35, r:10, t: 30, b: 80 },
        
        xaxis: {     
            tickangle: -45,    
            tickfont: {
                size: 12,
                color: 'rgb(107, 107, 107)'
            },
            showticklabels: true,
        },
        yaxis: {      
            tickfont: {
                size: 14,
                color: 'rgb(107, 107, 107)'
                }
        },
    };

    // Render both graphs
    Plotly.react('course-graph', subject_and_topic_data, course_graph_layout, { responsive: true })
        .then(() => {
            Plotly.Plots.resize('course-graph');  
        });
    Plotly.react('questions-type-graph', question_type_data, questions_per_subject_graph_layout, { responsive: true })
        .then(() => {
            Plotly.Plots.resize('questions-type-graph');  
        });
}
document.addEventListener('DOMContentLoaded', renderCourseGraph);

document.body.addEventListener('htmx:afterSwap', function(evt) {
    if (evt.detail.target.closest('#course-counts')) {
        renderCourseGraph();
    }
});
</script>
