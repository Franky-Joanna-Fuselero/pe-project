{% from 'components/core/show-nav-item' import show_nav_item %}
{% from 'components/core/breadcrumbs' import breadcrumb %}
{% from 'components/core/show-header' import show_header %}
{% from 'components/core/show-item' import show_item %}

{% extends 'components/core/faculty-layout' %}

{% block content %}

{{ breadcrumb() }}
<div class="flex justify-between mx-4 px-4">
    <div class="flex flex-col">
        <span class="text-3xl font-bold text-gray-800">Example of An Exam Report</span>
    </div>
</div>

<div class="flex flex-1 flex-col my-4">
    <div class="flex flex-col gap-2 max-w-full h-fit mx-8 rounded-xl ">

        <div class="flex flex-col w-full gap-y-4 rounded-xl bg-white p-4 shadow-sm ring-1 ring-gray-950/5 ">
            <div class="flex flex-col w-full gap-y-1">
                <h1 class="text-3xl font-bold text-gray-800">Report: Exam Name</h1>
                <span class="text-xs pl-2 text-gray-500 font-semibold">Created Date : January 1 2025</span>
                <div class="flex flex-wrap pl-2 items-center w-full gap-0.5">
                        <span class="text-xs text-gray-500 font-semibold">Course/s : </span>
                        {% for course in range(0,3) %}
                        <span class=" inline-flex items-center px-2 py-0.5 min-w-fit  bg-blue-100 rounded-full text-blue-900 font-semibold text-xs select-none"> 
                            BSCPE
                        </span>
                        {% endfor %}
                </div>
                <div class="flex flex-wrap pl-2 items-center w-full gap-0.5">
                        <span class="text-xs text-gray-500 font-semibold">Bloom's Taxonomy level Contained : </span>
                        {% for course in range(0,3) %}
                        <span class=" inline-flex items-center px-2 py-0.5 min-w-fit  bg-blue-100 rounded-full text-blue-900 font-semibold text-xs select-none"> 
                            Remember
                        </span>
                        {% endfor %}
                </div>
                <div class="flex flex-col w-full bg-gray-100 rounded-lg p-2">
                    <h1 class="text-md font-bold text-gray-800">Goal of this Report:</h1>
                    <p>Explain the Goal of this report</p>
                    <h1 class="text-md font-bold text-gray-800">Description of Variables:</h1>
                    <p>Explain the Bloom's level</p>
                    <p>Explain the Scoring System for the Bloom's Level</p>
                    <p>Explain the metric that are going to be used for this report</p>
                </div>
            </div>
            <div class="flex flex-col w-full gap-y-2">
                <h1 class="text-3xl font-bold text-gray-800">Data Overview</h1>
                <details class="details-animated w-full overflow-hidden bg-white rounded-lg shadow-sm ring-1 ring-gray-950/5">
                    <summary class="flex flex-1 p-2 text-md font-bold text-gray-800 justify-between hover:bg-blue-100 cursor-pointer duration-300">
                        <h1 class="">Data Types:</h1>
                    </summary>
                        <div class="overflow-x-auto shadow rounded-lg">
                            <table class="min-w-full bg-white border border-gray-200">
                                <thead>
                                <tr class="bg-gray-100 text-gray-700 uppercase text-sm leading-normal">
                                    <th class="py-3 px-6 text-left">Variable Name</th>
                                    <th class="py-3 px-6 text-left">Description</th>
                                    <th class="py-3 px-6 text-left">Type</th>
                                    <th class="py-3 px-6 text-left">Example Values</th>
                                </tr>
                                </thead>
                                <tbody class="text-gray-700 text-sm">
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Customer_ID</td>
                                    <td class="py-3 px-6">Unique identifier for each customer</td>
                                    <td class="py-3 px-6">Categorical (Nominal)</td>
                                    <td class="py-3 px-6">C001, C002, C003</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Age</td>
                                    <td class="py-3 px-6">Age of the customer</td>
                                    <td class="py-3 px-6">Numerical (Continuous)</td>
                                    <td class="py-3 px-6">25, 38, 52</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Gender</td>
                                    <td class="py-3 px-6">Gender identity of customer</td>
                                    <td class="py-3 px-6">Categorical (Nominal)</td>
                                    <td class="py-3 px-6">Male, Female, Other</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Purchase_Amount</td>
                                    <td class="py-3 px-6">Total value of purchases in USD</td>
                                    <td class="py-3 px-6">Numerical (Continuous)</td>
                                    <td class="py-3 px-6">120.50, 540.00</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Membership_Tier</td>
                                    <td class="py-3 px-6">Customer's membership category</td>
                                    <td class="py-3 px-6">Categorical (Ordinal)</td>
                                    <td class="py-3 px-6">Silver, Gold, Platinum</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Signup_Date</td>
                                    <td class="py-3 px-6">Date the customer signed up</td>
                                    <td class="py-3 px-6">Date/Time</td>
                                    <td class="py-3 px-6">2021-05-10, 2022-01-01</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Is_Active</td>
                                    <td class="py-3 px-6">Whether the customer is active</td>
                                    <td class="py-3 px-6">Boolean</td>
                                    <td class="py-3 px-6">TRUE, FALSE</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Last_Login</td>
                                    <td class="py-3 px-6">Most recent login date and time</td>
                                    <td class="py-3 px-6">Date/Time</td>
                                    <td class="py-3 px-6">2025-09-10 14:45:00</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="py-3 px-6">Country</td>
                                    <td class="py-3 px-6">Country of residence</td>
                                    <td class="py-3 px-6">Categorical (Nominal)</td>
                                    <td class="py-3 px-6">USA, UK, Germany</td>
                                </tr>
                                <tr class="hover:bg-gray-50">
                                    <td class="py-3 px-6">Items_Purchased</td>
                                    <td class="py-3 px-6">Number of items bought</td>
                                    <td class="py-3 px-6">Numerical (Discrete)</td>
                                    <td class="py-3 px-6">1, 3, 5</td>
                                </tr>
                                </tbody>
                            </table>
                            </div>
                </details>
                <div class="flex w-full gap-2">
                    <div class="flex relative justify-center items-center w-full p-4 gap-0.5 bg-blue-100 rounded-lg">
                        <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                            <span class="text-2xl font-bold text-gray-900 self-center">
                                0
                            </span> 
                            <span class="flex text-xs text-gray-500 font-mono font-semibold gap-0.5 items-center mt-auto">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
                                <path d="M7 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6ZM14.5 9a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM1.615 16.428a1.224 1.224 0 0 1-.569-1.175 6.002 6.002 0 0 1 11.908 0c.058.467-.172.92-.57 1.174A9.953 9.953 0 0 1 7 18a9.953 9.953 0 0 1-5.385-1.572ZM14.5 16h-.106c.07-.297.088-.611.048-.933a7.47 7.47 0 0 0-1.588-3.755 4.502 4.502 0 0 1 5.874 2.636.818.818 0 0 1-.36.98A7.465 7.465 0 0 1 14.5 16Z" />
                                </svg>


                                Students
                            </span>
                        </div>
                        <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                            <span class="text-2xl font-bold text-gray-900 self-center">
                                0
                            </span> 
                            <span class="flex text-xs text-gray-500 font-mono font-semibold gap-0.5 items-center mt-auto">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
                                <path d="M10.75 16.82A7.462 7.462 0 0 1 15 15.5c.71 0 1.396.098 2.046.282A.75.75 0 0 0 18 15.06v-11a.75.75 0 0 0-.546-.721A9.006 9.006 0 0 0 15 3a8.963 8.963 0 0 0-4.25 1.065V16.82ZM9.25 4.065A8.963 8.963 0 0 0 5 3c-.85 0-1.673.118-2.454.339A.75.75 0 0 0 2 4.06v11a.75.75 0 0 0 .954.721A7.506 7.506 0 0 1 5 15.5c1.579 0 3.042.487 4.25 1.32V4.065Z" />
                                </svg>
                                Subjects
                            </span>
                        </div>                   
                        <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                            <span class="text-2xl font-bold text-gray-900 self-center">
                                0
                            </span> 
                            <span class="flex text-xs text-gray-500 font-mono font-semibold gap-0.5 items-center mt-auto">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
                                <path d="M3.75 3A1.75 1.75 0 0 0 2 4.75v3.26a3.235 3.235 0 0 1 1.75-.51h12.5c.644 0 1.245.188 1.75.51V6.75A1.75 1.75 0 0 0 16.25 5h-4.836a.25.25 0 0 1-.177-.073L9.823 3.513A1.75 1.75 0 0 0 8.586 3H3.75ZM3.75 9A1.75 1.75 0 0 0 2 10.75v4.5c0 .966.784 1.75 1.75 1.75h12.5A1.75 1.75 0 0 0 18 15.25v-4.5A1.75 1.75 0 0 0 16.25 9H3.75Z" />
                                </svg>
                                Topics
                            </span>
                        </div>                   
                        <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                            <span class="text-2xl font-bold text-gray-900 self-center">
                                0
                            </span> 
                            <span class="flex text-xs text-gray-500 font-mono font-semibold gap-0.5 items-center mt-auto">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0ZM8.94 6.94a.75.75 0 1 1-1.061-1.061 3 3 0 1 1 2.871 5.026v.345a.75.75 0 0 1-1.5 0v-.5c0-.72.57-1.172 1.081-1.287A1.5 1.5 0 1 0 8.94 6.94ZM10 15a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z" clip-rule="evenodd" />
                                </svg>
                                Questions
                            </span>
                        </div>
                        <span class="absolute bottom-1 right-2 text-xs text-gray-800 font-semibold">
                            Key Variables
                        </span> 
                    </div>
                    <div class="flex relative justify-center  items-center w-full p-4 gap-0.5 bg-red-100 rounded-lg">
                        <div class="flex flex-col h-fit w-24 p-1">
                            <span class="text-2xl font-bold text-gray-900 self-center">
                                0
                            </span> 
                            <span class="flex text-xs text-gray-500 font-mono font-semibold gap-0.5 justify-center items-center mt-auto">
                                Missing <br> values
                            </span>
                        </div> 
                        <div class="flex flex-col h-fit w-24 p-1">
                            <span class="text-2xl font-bold text-gray-900 self-center">
                                0
                            </span> 
                            <span class="flex text-xs text-gray-500 font-mono font-semibold gap-0.5 justify-center items-center mt-auto">
                                Duplicates <br> Dropped
                            </span>
                        </div>                           
                        <div class="flex p-1 gap-y-2">
                            <span class="flex text-xs text-gray-800 font-semibold gap-0.5 items-center mt-auto">
                                * Missing values are imputed with the mean
                            </span>
                        </div>
                        <span class="absolute bottom-1 right-2 text-xs text-gray-800 font-semibold">
                            Data Cleaning
                        </span>                    
                    </div>
                </div>


            </div>
            <div  class="flex flex-col w-full gap-y-1">
                <p class="text-3xl font-bold text-gray-800">Descriptive Statistics</p>
                
                <div class="grid grid-cols-2 grid-rows-1 gap-1">

                    <div class="grid  grid-cols-1 grid-rows-2  bg-blue-100 p-1 rounded-lg">
                        <div class="flex flex-col relative justify-center items-center w-full p-4 gap-0.5">
                            <div class="flex  gap-x-1">
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-gray-900 self-center">
                                        0
                                    </span>
                                    <span class="text-xs text-gray-500 font-mono font-semibold self-center mt-auto">Mean</span>
                                </div>
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-green-900 self-center">
                                        0
                                    </span>
                                    <span class="text-xs text-green-400 font-mono font-semibold self-center mt-auto">Median</span>
                                </div>
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-orange-900 self-center">
                                        0
                                    </span>
                                    <span class="text-xs text-orange-400 font-mono font-semibold self-center mt-auto">Mode</span>
                                </div>

                            </div>
                            <div class="flex  gap-x-1">
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                <span class="text-2xl font-bold text-gray-900 self-center">
                                    0
                                </span>
                                <span class="text-xs text-gray-500 font-mono font-semibold self-center mt-auto">Standard <br> Deviation</span>
                                </div>
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-orange-900 self-center">
                                        0-100
                                    </span>
                                    <span class="text-xs text-orange-700/70 font-mono font-semibold self-center mt-auto">Range</span>
                                </div>

                            </div>                           
                            <span class="absolute top-1 left-2 text-lg text-gray-800 font-semibold">
                                Exam Scores
                            </span>             
                        </div>
                        <div class="flex relative justify-center col-span-2 items-center w-full p-1 gap-0.5">
                            <div class="flex flex-col h-fit w-full p-1 gap-y-2 border-r-2 border-gray-900">
                                <span class="text-sm font-bold text-gray-900 self-center">
                                    Subject 1 : 3
                                </span>
                                <span class="text-sm font-bold text-gray-900 self-center">
                                    Subject 2 : 2
                                </span>
                                <span class="text-sm font-bold text-gray-900 self-center">
                                    Subject 3 : 1
                                </span>
                                <span class="text-base text-gray-600 font-mono font-semibold self-center mt-auto">Top Three Minimum</span>
                            </div>
                            <div class="flex flex-col h-fit w-full p-1 gap-y-2">
                                    <span class="text-sm font-bold text-gray-900 self-center">
                                        Subject 1 : 3
                                    </span>
                                    <span class="text-sm font-bold text-gray-900 self-center">
                                        Subject 2 : 2
                                    </span>
                                    <span class="text-sm font-bold text-gray-900 self-center">
                                        Subject 3 : 1
                                    </span>
                                    <span class="text-base text-gray-600 font-mono font-semibold self-center mt-auto">Top Three Maximum</span>
                            </div>
                            <span class="absolute top-1 left-2 text-md text-gray-800 font-semibold">
                                Subjects
                            </span>             
                        </div>
                    </div>
                    
                    <div class="col-start-2 grid  grid-cols-1 grid-rows-2 gap-1 bg-orange-100 p-1 rounded-lg ">
                        <div class="flex flex-col relative justify-center items-center w-full p-4 gap-0.5">
                            <div class="flex  gap-x-1">
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-gray-900 self-center">
                                        0%
                                    </span>
                                    <span class="text-xs text-gray-500 font-mono font-semibold self-center mt-auto">Remember</span>
                                </div>
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-green-900 self-center">
                                        0%
                                    </span>
                                    <span class="text-xs text-green-400 font-mono font-semibold self-center mt-auto">Understanding</span>
                                </div>
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-orange-900 self-center">
                                        0%
                                    </span>
                                    <span class="text-xs text-orange-400 font-mono font-semibold self-center mt-auto">Apply</span>
                                </div>
                            </div>
                            <div class="flex  gap-x-1">
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                <span class="text-2xl font-bold text-gray-900 self-center">
                                    0%
                                </span>
                                <span class="text-xs text-gray-500 font-mono font-semibold self-center mt-auto">Analyze</span>
                                </div>
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-orange-900 self-center">
                                        0%
                                    </span>
                                    <span class="text-xs text-orange-700/70 font-mono font-semibold self-center mt-auto">Evaluate</span>
                                </div>
                                <div class="flex flex-col h-fit w-24 p-1 gap-y-2">
                                    <span class="text-2xl font-bold text-orange-900 self-center">
                                        0%
                                    </span>
                                    <span class="text-xs text-orange-700/70 font-mono font-semibold self-center mt-auto">Create</span>
                                </div>
                            </div>   
                            <span class="absolute top-1 left-2 text-lg text-gray-800 font-semibold">
                                Level Scores
                            </span>           
                        </div>
                        <div class="flex relative justify-center col-span-2 items-center w-full p-1 gap-0.5 ">
                            <div class="flex flex-col h-fit w-full p-1 gap-y-2 border-r-2 border-gray-900">
                                <span class="text-sm font-bold text-gray-900 self-center">
                                    Level 1 : 3
                                </span>
                                <span class="text-sm font-bold text-gray-900 self-center">
                                    Level 2 : 2
                                </span>
                                <span class="text-sm font-bold text-gray-900 self-center">
                                    Level 3 : 1
                                </span>
                                <span class="text-base text-gray-600 font-mono font-semibold self-center mt-auto">Top Three Minimum</span>
                            </div>
                            <div class="flex flex-col h-fit w-full p-1 gap-y-2">
                                    <span class="text-sm font-bold text-gray-900 self-center">
                                        Level 1 : 3%
                                    </span>
                                    <span class="text-sm font-bold text-gray-900 self-center">
                                        Level 2 : 2%
                                    </span>
                                    <span class="text-sm font-bold text-gray-900 self-center">
                                        Level 3 : 1%
                                    </span>
                                    <span class="text-base text-gray-600 font-mono font-semibold self-center mt-auto">Top Three Maximum</span>
                            </div>
                            <span class="absolute top-1 left-2 text-md text-gray-800 font-semibold">
                                Subjects
                            </span>             
                        </div>
                    </div>

                </div>
            </div>
            <div  class="flex flex-col w-full">
                <p class="text-3xl font-bold text-gray-800">Exploratory Data Analysis</p>
                <div class="flex flex-col gap-2 p-1">
                    <div class="flex gap-4">
                        <div id="exam-histogram" class="w-full"></div>
                        <div id="exam-boxplot" class="w-full"></div>
                    </div>
                    <div class="w-full">
                        <div id="exam-compare-group" class="w-full"></div>
                    </div>
                    <div class="flex justify-center w-full">
                        <div id="exam-heatmap"></div>
                    </div>
                </div>
            </div>

                <div class="flex flex-col gap-2 p-1">

                </div>
            </div>
              <div id="heatmap"></div>
  <div id="plot"></div>
  <div id="bloom-chart"></div>

    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const target = document.getElementById('exam-histogram');
    if (target) {
        renderHistogram(target);
    }
});

function renderHistogram(el) {
    const courses = ['BSCS', 'BSIT', 'BSCPE'];
    let numQuestions = 20;
    let numStudents = 30; 
    let minScore = 0;

    let allScores = [];

    let exam_groups = ['BSCS', 'BSIT', 'BSCPE'];
    let exam_groups_score = {};  

    for (let i = 0; i < exam_groups.length; i++) {
        exam_groups_score[exam_groups[i]] = [];
    }

    let with_groups = exam_groups.length > 1 ? true : false; 
    let subplot_rows = with_groups ? 2 : 1;


    let maxScorePerQuestion =  Array.from({ length: numQuestions }, () => Math.floor(Math.random() * 30) + 1);
    for (let s = 0; s < numStudents; s++) {
        for (let q = 0; q < numQuestions; q++) {
            // Random score between 0 and the max for this question
            let score = Math.floor(Math.random() * (maxScorePerQuestion[q] + 1));
            
            // Normalize to percentage
            let normalizedScore = Math.round((score / maxScorePerQuestion[q]) * 100);

            allScores.push(normalizedScore);
            let randomGroupName = exam_groups[Math.floor(Math.random() * exam_groups.length)];
            exam_groups_score[randomGroupName].push(normalizedScore);
        }
    }

    histogram_traces = [];

    // Trace for histogram
    let overall_histogram_trace = {
      x: allScores,
      name: 'Overall',  
      type: 'histogram',
      xbins: { size: 5 },
        marker: {
            line: { width: 2, color: '#333'},
            color: 'rgb(49,130,189)',
            opacity:1
        }
    };
    histogram_traces.push(overall_histogram_trace);

    const group_colors = ['rgb(49,130,189)', 'rgb(87, 196, 133)', 'rgb(238, 99, 99)', 'rgb(120,130,80)'];
    const groups = Object.keys(exam_groups_score);

    groups.forEach((group, idx) => {
        let trace = {
            x: exam_groups_score[group],
            type: 'histogram',
            name: group,  
            xbins: { size: 5 },
            xaxis: 'x2',
            yaxis: 'y2',
            marker: {
                line: { width: 2, color: '#333' },
                color: group_colors[idx % group_colors.length],  
                opacity: .7
            }
        };
        histogram_traces.push(trace);
    });

    let histogram_layout = {
      grid: {rows:subplot_rows, columns:1, pattern: 'independent'},
      title: {
        text: "Exam Scores Distribution",
        font: { size: 16, color: "#4B5563", family: "Arial Black, sans-serif" },
        x: 0.55,
        xanchor: 'center',
        yanchor: 'top'
      },
      barmode: "overlay",
      height: 400,
      autosize: true,
      margin: { l: 40, r: 10, t: 80, b: 30 },
      xaxis: {
        tickfont: { size: 12, color: 'rgb(107, 107, 107)' },
        showticklabels: false,
        range: [-10, 110]
      },
      yaxis: {
        dtick: 20,
        domain: [0.55, 1],
        title: { text: 'Frequency', font: { size: 12, color: '#7f7f7f' } },
        tickfont: { size: 12, color: 'rgb(107, 107, 107)' },
      },
      xaxis2: {
        title: { text: 'Exam Scores', font: { size: 12, color: '#7f7f7f' },  standoff: 10 },
        tickfont: { size: 12, color: 'rgb(107, 107, 107)' },
        range: [-10, 110],
        anchor: 'y2'
      },
      yaxis2: {
        dtick: 20,
        domain: [0, 0.50],
        title: { text: 'Frequency', font: { size: 12, color: '#7f7f7f' } },
        tickfont: { size: 12, color: 'rgb(107, 107, 107)' }
      },
    legend: {
        orientation: 'h',
        x: 0.5,
        xanchor: 'center',
        y: 1.0,          // slightly above plot area
        yanchor: 'bottom'
    }
    };

    Plotly.newPlot('exam-histogram', histogram_traces, histogram_layout).then(() => {
            Plotly.Plots.resize('exam-histogram');  
        });

    let boxplot_traces = [];

    let overall_boxplot_trace = {
        y: allScores,
        name: 'Overall',  
        type: 'box',
        boxpoints: 'all',
        jitter: 0.8,
        whiskerwidth: 0.4,
        pointpos: -2,
        xaxis: 'x1',
        yaxis: 'y1',
        marker: {
            color: 'rgb(49,130,189)',
            size: 5,
            line: { width: 1, color: '#333' },
            opacity: 0.7
        },    
        };
    boxplot_traces.push(overall_boxplot_trace);

    groups.forEach((group, idx) => {
        let trace = {
            y: exam_groups_score[group],
            type: 'box',
            name: group,  
            boxpoints: 'all',
            jitter: 0.8,
            whiskerwidth: 0.4,
            pointpos: -2,
            xaxis: 'x2',
            yaxis: 'y2',
            marker: {
                size: 5,
                line: { width: 1, color: '#333' },
                color: group_colors[idx % group_colors.length],  
                opacity: 0.7
            },
            opacity: 1
        };
        boxplot_traces.push(trace);
    });

    let boxplot_layout = {
      grid: {rows:subplot_rows, columns:1, pattern: 'independent'},
      title: {
        text: "Exam Scores Box Plots",
        font: { size: 16, color: "#4B5563", family: "Arial Black, sans-serif" },
        x: 0.55,
        xanchor: 'center',
        yanchor: 'top'
      },
      height: 500,
      autosize: true,
     margin: { l: 60, r: 10, t: 80, b: 30 },
      yaxis: {
        autorange: true,
        dtick: 50,
        gridwidth: 1,
        title: { text: 'Exam Scores', font: { size: 12, color: '#7f7f7f' }},
        tickfont: { size: 12, color: 'rgb(107, 107, 107)' },
        range: [-10, 150]
      },
      xaxis: {
        domain: [0, 1],
        tickfont: { size: 12, color: 'rgb(107, 107, 107)' },
      },
      yaxis2: {
        domain: [0, 0.50],
        autorange: true,
        dtick: 10,
        gridwidth: 1,
        title: { text: 'Exam Scores', font: { size: 12, color: '#7f7f7f' }},
        tickfont: { size: 12, color: 'rgb(107, 107, 107)' },
        range: [-10, 110],
        anchor: 'y2'
      },
      xaxis2: {
        type: 'category',
        tickfont: { size: 12, color: 'rgb(107, 107, 107)' }
      },
    legend: {
        orientation: 'h',
        x: 0.5,
        xanchor: 'center',
        y: 1.0,          // slightly above plot area
        yanchor: 'bottom'
    }
    };

    Plotly.newPlot('exam-boxplot', boxplot_traces, boxplot_layout).then(() => {
            Plotly.Plots.resize('exam-boxplot'); 
        });

    const exam_compare_types_and_blooms_data = [
  {
    name: 'MCQ',
    blooms: {
      'Remember':   [8, 6, 10],
      'Understand': [7, 5, 6],
      'Apply':      [12, 8, 13],
      'Analyze':    [5, 4, 6],
      'Evaluate':   [3, 2, 4],
      'Create':     [1, 1, 2]
    }
  },
  {
    name: 'T/F',
    blooms: {
      'Remember':   [6, 10, 12],
      'Understand': [6, 8, 9],
      'Apply':      [4, 3, 5],
      'Analyze':    [2, 2, 3],
      'Evaluate':   [1, 1, 1],
      'Create':     [0, 0, 1]
    }
  },
  {
    name: 'Identification',
    blooms: {
      'Remember':   [10, 9, 11],
      'Understand': [5, 6, 7],
      'Apply':      [3, 4, 5],
      'Analyze':    [2, 2, 3],
      'Evaluate':   [1, 0, 1],
      'Create':     [0, 0, 1]
    }
  },
  {
    name: 'Matching',
    blooms: {
      'Remember':   [5, 6, 5],
      'Understand': [7, 8, 6],
      'Apply':      [4, 3, 4],
      'Analyze':    [1, 2, 2],
      'Evaluate':   [0, 0, 1],
      'Create':     [0, 1, 0]
    }
  },
  {
    name: 'Ranking',
    blooms: {
      'Remember':   [2, 1, 2],
      'Understand': [2, 2, 2],
      'Apply':      [4, 5, 5],
      'Analyze':    [3, 2, 4],
      'Evaluate':   [1, 2, 1],
      'Create':     [0, 1, 0]
    }
  },
  {
    name: 'Coding',
    blooms: {
      'Remember':   [0, 1, 1],
      'Understand': [2, 2, 3],
      'Apply':      [5, 4, 6],
      'Analyze':    [3, 2, 4],
      'Evaluate':   [4, 3, 5],
      'Create':     [6, 5, 7]
    }
  }
        ];

    const bloomColors = {
      'Remember': 'rgb(49,130,189)',
      'Understand': 'rgb(87, 196, 133)',
      'Apply': 'rgb(252, 186, 3)',
      'Analyze': 'rgb(245, 175, 75)',
      'Evaluate' : 'rgb(238, 99, 99)',
      'Create' : 'rgb(158, 120, 242)'
    };

    const exam_compare_types_and_blooms_traces = [];

    exam_compare_types_and_blooms_data.forEach(qtype => {
      Object.entries(qtype.blooms).forEach(([bloom, values]) => {
        exam_compare_types_and_blooms_traces.push({
          x: courses.map(course => `${course}<br>${qtype.name}`),
          y: values,
          name: bloom,
          type: 'bar',       
          marker: { 
            color: bloomColors[bloom] || '#888',
            line: { width: 2, color: '#333' },
            opacity: 0.7
        },
          legendgroup: bloom,
            showlegend: !exam_compare_types_and_blooms_traces.some(t => t.name === bloom) // show legend only once per Bloom

        });
      });
    });

    const exam_compare_types_and_blooms_layout = {
        title: {
            text: "Compare by Question Types with Bloom's Level",
            font: { size: 16, color: "#4B5563", family: "Arial Black, sans-serif" },
            x: 0.50,
            xanchor: 'center',
            yanchor: 'top'
        },
        height: 500,
        autosize: true,
        barmode: 'stack',
        margin: { l: 60, r: 10, t: 80, b: 80 },
        yaxis: {
            gridwidth: 1,
            title: { text: 'Exam Scores', font: { size: 12, color: '#7f7f7f' }},
            tickfont: { size: 12, color: 'rgb(107, 107, 107)' },
        },
        xaxis: {
            domain: [0, 1],
            tickfont: { size: 12, color: 'rgb(107, 107, 107)' },
            tickangle: -30
        },
        legend: {
            orientation: 'h',
            x: 0.5,
            xanchor: 'center',
            y: 1.0,         
            yanchor: 'bottom'
        }
    };

    Plotly.newPlot('exam-compare-group', exam_compare_types_and_blooms_traces, exam_compare_types_and_blooms_layout).then(() => {
            Plotly.Plots.resize('exam-compare-group'); 
        });

function makeQuestions(level, count) {
  let arr = [];
  for (let i = 1; i <= count; i++) {
    arr.push({
      test: ["Quiz", "Midterm", "Final"][Math.floor(Math.random()*3)],
      type: ["MCQ", "Short", "Essay", "Project"][Math.floor(Math.random()*4)],
      raw: Math.floor(Math.random() * 31),            // 0–30
      bloom: Math.round((Math.random())*100)/100,     // 0–1
      topic: "Topic " + (Math.floor(Math.random()*10)+1),
      subject: ["Math","Science","History","English","Philosophy","Art","Engineering"][Math.floor(Math.random()*7)],
      bloomLevel: level
    });
  }
  return arr;
}

var questions = {
  "Remember":   makeQuestions("Remember", 10),
  "Understand": makeQuestions("Understand", 10),
  "Apply":      makeQuestions("Apply", 8),
  "Analyze":    makeQuestions("Analyze", 8),
  "Evaluate":   makeQuestions("Evaluate", 7),
  "Create":     makeQuestions("Create", 7)
};

// Build one trace per taxonomy with ascending raw order
var question_heatmap_traces = Object.keys(questions).map(level => {
  let qData = questions[level].sort((a, b) => a.raw - b.raw);

  return {
    y: Array(qData.length).fill(level),
    x: Array(qData.length).fill(1),
    type: 'bar',
    orientation: 'h',
    marker: {
                        line: { width: 2.1, color: '#333', opacity:0.7},
      color: qData.map(q => q.raw),
      colorscale: [
  ['0.0', 'rgb(49, 130, 189)'],
  ['0.1', 'rgb(63, 131, 176)'],
  ['0.2', 'rgb(78, 132, 163)'],
  ['0.3', 'rgb(92, 133, 150)'],
  ['0.4', 'rgb(107, 134, 137)'],
  ['0.5', 'rgb(122, 135, 124)'],
  ['0.6', 'rgb(136, 136, 111)'],
  ['0.7', 'rgb(151, 137, 98)'],
  ['0.8', 'rgb(165, 138, 85)'],
  ['0.9', 'rgb(180, 139, 72)'],
  ['1.0', 'rgb(195, 140, 60)']
], opacity: 1,
      cmin: 0,
      cmax: 30,
      colorbar: { title: 'Raw Score (0–30)' }
    },
    customdata: qData.map(q => [q.test, q.type, q.raw, q.bloom, q.topic, q.subject]),
    hovertemplate:
      "Question text: %{customdata[0]}<br>" +
      "Question type: %{customdata[1]}<br>" +
      "Raw points: %{customdata[2]}<br>" +
      "Bloom's score: %{customdata[3]}<br>" +
      "Question topic: %{customdata[4]}<br>" +
      "Question subject: %{customdata[5]}<extra></extra>",
                  hoverlabel: {
                font: { color: 'white' }      // hover text color
            },
    showlegend: false
  };
});

var question_heatmap_layout = {
  barmode: 'stack',
      title: {
        text: "Performance Distribution by Question Levels",
        font: { size: 16, color: "#4B5563", family: "Arial Black, sans-serif" },
        x: 0.5,
        xanchor: 'center'
    },
  width: 900,
  height: 400,
  xaxis: {  showgrid: false, zeroline: false, 
        title: {
        text: 'No. of Questions',
        font: { size: 12, color: '#7f7f7f' }
        }
    },
  yaxis: { 
            tickfont: {
            size: 10,
            color: 'rgb(107, 107, 107)'
        },
    categoryorder: "array",
    categoryarray: ["Remember","Understand","Apply","Analyze","Evaluate","Create"],
  },
    autosize: true,
      margin: { l: 70, r: 10, t: 60, b: 150 },
      annotations: [
    {
      text: "Exam Scores",
      xref: "paper",
      yref: "paper",
      x: 1.05,       // align with colorbar (to the right of plot)
      y: 0,      // below the plot area
      showarrow: false,
      textangle: 0, // rotate text
      font: {
            size: 10,
            color: 'rgb(107, 107, 107)'
      },
      xanchor: "center",
      yanchor: "top"
    }
  ]
};

Plotly.newPlot('exam-heatmap', question_heatmap_traces, question_heatmap_layout);

}
</script>
{% endblock %}

